import { test, expect } from '@playwright/test';
import { LunarGridPage } from '../support/pages/LunarGridPage';
import { AuthPage } from '../support/pages/AuthPage';
import { TestDataGenerator, TransactionFormDataGenerator } from '../config/test-data-generator';

/**
 * ğŸŸ¢ SMOKE TESTS - TRANSACTION MANAGEMENT
 * 
 * TesteazÄƒ workflow-urile critice pentru gestionarea tranzacÈ›iilor:
 * - AdÄƒugare tranzacÈ›ie nouÄƒ
 * - Editare tranzacÈ›ie existentÄƒ  
 * - È˜tergere tranzacÈ›ie
 * - Filtrare È™i cÄƒutare
 * - Export de date
 */

test.describe('ğŸŸ¢ Transaction Management Smoke Tests', { tag: '@smoke' }, () => {
  let lunarGridPage: LunarGridPage;
  let authPage: AuthPage;

  test.beforeEach(async ({ page }) => {
    lunarGridPage = new LunarGridPage(page);
    authPage = new AuthPage(page);

    // Autentificare cu fix-ul pentru logica corectÄƒ
    const loginResult = await authPage.loginWithPrimaryAccount();
    expect(loginResult.success).toBe(true);

    // NavigheazÄƒ la LunarGrid
    await lunarGridPage.goto();
    await lunarGridPage.waitForGridToLoad();
  });

  test('utilizatorul poate adÄƒuga o tranzacÈ›ie nouÄƒ Ã®n grid', async () => {
    // ExpandeazÄƒ o categorie aleatoare
    const categoryKey = await lunarGridPage.expandRandomCategory();
    
    // AdaugÄƒ o subcategorie pentru testare
    const subcategoryName = await lunarGridPage.addRandomSubcategory(categoryKey);
    
    // AdaugÄƒ o tranzacÈ›ie Ã®n subcategorie
    const transaction = await lunarGridPage.addRandomTransactionInSubcategory(categoryKey, subcategoryName);
    
    // VerificÄƒ cÄƒ tranzacÈ›ia apare Ã®n grid
    await lunarGridPage.verifyCellValue(categoryKey, subcategoryName, transaction.day, transaction.amount);
  });

  test('utilizatorul poate crea o subcategorie nouÄƒ', async () => {
    // ExpandeazÄƒ o categorie aleatoare
    const categoryKey = await lunarGridPage.expandRandomCategory();
    
    // AdaugÄƒ o subcategorie nouÄƒ
    const subcategoryName = await lunarGridPage.addRandomSubcategory(categoryKey);
    
    // VerificÄƒ cÄƒ subcategoria existÄƒ
    await lunarGridPage.verifySubcategoryExists(subcategoryName);
  });

  test('utilizatorul poate redenumi o subcategorie', async () => {
    // ExpandeazÄƒ o categorie È™i adaugÄƒ subcategorie
    const categoryKey = await lunarGridPage.expandRandomCategory();
    const originalName = await lunarGridPage.addRandomSubcategory(categoryKey);
    
    // RedenumeÈ™te subcategoria
    const newName = await lunarGridPage.renameSubcategory(originalName);
    
    // VerificÄƒ cÄƒ noul nume existÄƒ È™i vechiul nu mai existÄƒ
    await lunarGridPage.verifySubcategoryExists(newName);
    await lunarGridPage.verifySubcategoryNotExists(originalName);
  });

  test('utilizatorul poate adÄƒuga o tranzacÈ›ie recurentÄƒ', async () => {
    // ExpandeazÄƒ o categorie È™i adaugÄƒ subcategorie
    const categoryKey = await lunarGridPage.expandRandomCategory();
    const subcategoryName = await lunarGridPage.addRandomSubcategory(categoryKey);
    
    // AdaugÄƒ o tranzacÈ›ie recurentÄƒ
    const transaction = await lunarGridPage.addRandomRecurringTransaction(categoryKey, subcategoryName);
    
    // VerificÄƒ cÄƒ tranzacÈ›ia apare Ã®n grid
    await lunarGridPage.verifyCellValue(categoryKey, subcategoryName, transaction.day, transaction.amount);
  });

  test('utilizatorul poate È™terge o tranzacÈ›ie din celulÄƒ', async () => {
    // ExpandeazÄƒ categorie È™i adaugÄƒ subcategorie cu tranzacÈ›ie
    const categoryKey = await lunarGridPage.expandRandomCategory();
    const subcategoryName = await lunarGridPage.addRandomSubcategory(categoryKey);
    const transaction = await lunarGridPage.addRandomTransactionInSubcategory(categoryKey, subcategoryName);
    
    // È˜terge tranzacÈ›ia
    await lunarGridPage.deleteTransactionFromCell(categoryKey, subcategoryName, transaction.day);
    
    // VerificÄƒ cÄƒ celula este goalÄƒ (sau conÈ›ine "0.00")
    await lunarGridPage.verifyCellValue(categoryKey, subcategoryName, transaction.day, "0.00");
  });

  test('utilizatorul poate naviga prin luni diferite', async () => {
    // SchimbÄƒ luna la o lunÄƒ aleatoare
    const newDate = await lunarGridPage.changeToRandomMonth();
    
    // VerificÄƒ cÄƒ header-ul lunii s-a actualizat
    await lunarGridPage.verifyMonthHeader(newDate.month, newDate.year);
  });
}); 