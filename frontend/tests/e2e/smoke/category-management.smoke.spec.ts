import { test, expect } from '@playwright/test';
import { CategoryEditorPage } from '../support/pages/CategoryEditorPage';
import { AuthPage } from '../support/pages/AuthPage';

/**
 * ðŸŸ¢ SMOKE TESTS - CATEGORY MANAGEMENT
 * 
 * TesteazÄƒ workflow-urile critice pentru gestionarea categoriilor:
 * - Navigare la Options Page È™i CategoryEditor
 * - Vizualizare categorii existente
 * - Accesibilitate È™i UI basics
 * - Verificare funcÈ›ionalitate de bazÄƒ
 */

test.describe('ðŸŸ¢ Category Management Smoke Tests', { tag: '@smoke' }, () => {
  let categoryEditorPage: CategoryEditorPage;
  let authPage: AuthPage;

  test.beforeEach(async ({ page }) => {
    categoryEditorPage = new CategoryEditorPage(page);
    authPage = new AuthPage(page);

    // Autentificare cu fix-ul pentru logica corectÄƒ
    const loginResult = await authPage.loginWithPrimaryAccount();
    expect(loginResult.success).toBe(true);
  });

  test('utilizatorul poate accesa CategoryEditor din Options', async () => {
    // Deschide CategoryEditor din Options page
    await categoryEditorPage.openFromOptionsPage();

    // VerificÄƒ cÄƒ modal-ul CategoryEditor s-a deschis
    await expect(categoryEditorPage.modal).toBeVisible();
    await expect(categoryEditorPage.categoriesSection).toBeVisible();
  });

  test('utilizatorul poate selecta o categorie È™i vizualiza subcategoriile', async () => {
    // Deschide CategoryEditor
    await categoryEditorPage.openFromOptionsPage();

    // SelecteazÄƒ categoria 'FOOD' 
    await categoryEditorPage.selectCategory('FOOD');

    // VerificÄƒ cÄƒ subcategoriile sunt afiÈ™ate
    await expect(categoryEditorPage.subcategoriesSection).toBeVisible();
    await expect(categoryEditorPage.subcategoriesWrapper).toBeVisible();

    // VerificÄƒ cÄƒ existÄƒ cel puÈ›in o subcategorie
    const subcategoryCount = await categoryEditorPage.getSubcategoryCount();
    expect(subcategoryCount).toBeGreaterThan(0);
  });

  test('utilizatorul poate adÄƒuga o subcategorie nouÄƒ', async () => {
    // Deschide CategoryEditor È™i selecteazÄƒ categoria
    await categoryEditorPage.openFromOptionsPage();
    await categoryEditorPage.selectCategory('FOOD');

    // GenereazÄƒ un nume unic pentru subcategorie
    const uniqueSubcatName = `TestSubcat${Date.now()}`;

    // AdaugÄƒ subcategoria
    await categoryEditorPage.addSubcategory(uniqueSubcatName);

    // VerificÄƒ cÄƒ subcategoria apare Ã®n listÄƒ
    await categoryEditorPage.verifySubcategoryExists(uniqueSubcatName);

    // VerificÄƒ cÄƒ are flagul de custom
    await categoryEditorPage.verifyCustomFlag(uniqueSubcatName);
  });

  test('utilizatorul poate redenumi o subcategorie', async () => {
    // Deschide CategoryEditor È™i selecteazÄƒ categoria
    await categoryEditorPage.openFromOptionsPage();
    await categoryEditorPage.selectCategory('FOOD');

    // AdaugÄƒ o subcategorie de test
    const originalName = `Original${Date.now()}`;
    await categoryEditorPage.addSubcategory(originalName);

    // RedenumeÈ™te subcategoria
    const newName = `Renamed${Date.now()}`;
    await categoryEditorPage.renameSubcategory(originalName, newName);

    // VerificÄƒ cÄƒ noul nume existÄƒ È™i vechiul nu mai existÄƒ
    await categoryEditorPage.verifySubcategoryExists(newName);
    await categoryEditorPage.verifySubcategoryNotExists(originalName);
  });

  test('utilizatorul poate È™terge o subcategorie custom', async () => {
    // Deschide CategoryEditor È™i selecteazÄƒ categoria
    await categoryEditorPage.openFromOptionsPage();
    await categoryEditorPage.selectCategory('FOOD');

    // AdaugÄƒ o subcategorie de test
    const testSubcatName = `ToDelete${Date.now()}`;
    await categoryEditorPage.addSubcategory(testSubcatName);
    await categoryEditorPage.verifySubcategoryExists(testSubcatName);

    // È˜terge subcategoria (cu confirmare)
    await categoryEditorPage.deleteSubcategory(testSubcatName, true);

    // VerificÄƒ cÄƒ subcategoria nu mai existÄƒ
    await categoryEditorPage.verifySubcategoryNotExists(testSubcatName);
  });

  test('utilizatorul poate Ã®nchide CategoryEditor cu Escape', async () => {
    // Deschide CategoryEditor
    await categoryEditorPage.openFromOptionsPage();

    // VerificÄƒ cÄƒ modal-ul este deschis
    await expect(categoryEditorPage.modal).toBeVisible();

    // ÃŽnchide cu Escape key
    await categoryEditorPage.closeWithEscape();

    // VerificÄƒ cÄƒ modal-ul s-a Ã®nchis
    await expect(categoryEditorPage.modal).not.toBeVisible();
  });

  test('utilizatorul poate Ã®nchide CategoryEditor cu butonul Close', async () => {
    // Deschide CategoryEditor
    await categoryEditorPage.openFromOptionsPage();

    // VerificÄƒ cÄƒ modal-ul este deschis
    await expect(categoryEditorPage.modal).toBeVisible();

    // ÃŽnchide cu butonul
    await categoryEditorPage.closeWithButton();

    // VerificÄƒ cÄƒ modal-ul s-a Ã®nchis
    await expect(categoryEditorPage.modal).not.toBeVisible();
  });
}); 