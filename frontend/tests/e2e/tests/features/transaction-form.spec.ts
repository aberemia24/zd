import { test, expect } from '@playwright/test';
import { AuthPage } from '../../support/pages/AuthPage';
import { TransactionFormDataGenerator } from '../../config/test-data-generator';

test.describe('TransactionForm - Test cu Date Dinamice', () => {
  let authPage: AuthPage;

  test.beforeEach(async ({ page }) => {
    authPage = new AuthPage(page);
    // Reset generatorul pentru fiecare test
    // TestDataGenerator.reset(); - nu e necesar dacƒÉ vrem varietate
  });

  test('adaugƒÉ tranzac»õie cu date complet aleatoare', async ({ page }) => {
    console.log('üöÄ Test adƒÉugare tranzac»õie cu date dinamic generate');
    
    // GenereazƒÉ date de test complet aleatoare
    const formData = TransactionFormDataGenerator.getFormData();
    const selectors = TransactionFormDataGenerator.getFormSelectors();
    
    console.log('üé≤ Date generate pentru formular:', TransactionFormDataGenerator.getFormLabels(formData));
    
    // Login
    await authPage.loginWithPrimaryAccount();
    console.log('‚úÖ Login realizat cu succes');
    
    // VerificƒÉ cƒÉ suntem pe pagina de transactions (default dupƒÉ login)
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // VerificƒÉ existen»õa formularului
    const transactionForm = page.getByTestId(selectors.form);
    await expect(transactionForm).toBeVisible();
    console.log('‚úÖ Formular de tranzac»õie gƒÉsit');
    
    // Pasul 1: SelecteazƒÉ tipul de tranzac»õie
    const typeSelect = page.getByTestId(selectors.typeSelect);
    await expect(typeSelect).toBeVisible();
    await typeSelect.selectOption(formData.type);
    console.log(`‚úÖ Tip tranzac»õie selectat: ${formData.type}`);
    
    // A»ôteaptƒÉ ca op»õiunile de categorie sƒÉ se √Æncarce
    await page.waitForTimeout(1000);
    
    // Pasul 2: CompleteazƒÉ suma
    const amountInput = page.getByTestId(selectors.amountInput);
    await expect(amountInput).toBeVisible();
    await amountInput.clear();
    await amountInput.fill(formData.amount);
    console.log(`‚úÖ SumƒÉ completatƒÉ: ${formData.amount}`);
    
    // Pasul 3: SelecteazƒÉ categoria
    const categorySelect = page.getByTestId(selectors.categorySelect);
    await expect(categorySelect).toBeVisible();
    await expect(categorySelect).toBeEnabled();
    await categorySelect.selectOption(formData.category);
    console.log(`‚úÖ Categorie selectatƒÉ: ${formData.category}`);
    
    // A»ôteaptƒÉ ca subcategoriile sƒÉ se √Æncarce
    await page.waitForTimeout(1000);
    
    // Pasul 4: SelecteazƒÉ subcategoria
    const subcategorySelect = page.getByTestId(selectors.subcategorySelect);
    await expect(subcategorySelect).toBeVisible();
    await expect(subcategorySelect).toBeEnabled();
    await subcategorySelect.selectOption(formData.subcategory);
    console.log(`‚úÖ Subcategorie selectatƒÉ: ${formData.subcategory}`);
    
    // Pasul 5: CompleteazƒÉ data
    const dateInput = page.getByTestId(selectors.dateInput);
    await expect(dateInput).toBeVisible();
    await dateInput.fill(formData.date);
    console.log(`‚úÖ DatƒÉ completatƒÉ: ${formData.date}`);
    
    // Pasul 6: ConfigureazƒÉ recursivitatea
    const recurringCheckbox = page.getByTestId(selectors.recurringCheckbox);
    await expect(recurringCheckbox).toBeVisible();
    
    if (formData.recurring) {
      await recurringCheckbox.check();
      console.log('‚úÖ Checkbox recurent bifat');
      
      // A»ôteaptƒÉ ca select-ul de frecven»õƒÉ sƒÉ devinƒÉ activ
      await page.waitForTimeout(500);
      
      const frequencySelect = page.getByTestId(selectors.frequencySelect);
      await expect(frequencySelect).toBeVisible();
      await expect(frequencySelect).toBeEnabled();
      await frequencySelect.selectOption(formData.frequency);
      console.log(`‚úÖ Frecven»õƒÉ selectatƒÉ: ${formData.frequency}`);
    } else {
      // AsigurƒÉ-te cƒÉ nu e bifat
      await recurringCheckbox.uncheck();
      console.log('‚úÖ Tranzac»õie configuratƒÉ ca non-recurentƒÉ');
    }
    
    // Pasul 7: CompleteazƒÉ descrierea (op»õional)
    if (formData.description) {
      const descriptionInput = page.getByTestId(selectors.descriptionInput);
      await expect(descriptionInput).toBeVisible();
      await descriptionInput.fill(formData.description);
      console.log(`‚úÖ Descriere completatƒÉ: "${formData.description}"`);
    } else {
      console.log('‚úÖ FƒÉrƒÉ descriere (lƒÉsat gol)');
    }
    
    // Pasul 8: VerificƒÉ cƒÉ butonul de adƒÉugare e activ
    const addButton = page.getByTestId(selectors.addButton);
    await expect(addButton).toBeVisible();
    await expect(addButton).toBeEnabled();
    console.log('‚úÖ Butonul de adƒÉugare este activ');
    
    // FƒÉ un screenshot √Ænainte de submit
    await page.screenshot({ 
      path: 'test-results/transaction-form-before-submit.png', 
      fullPage: true 
    });
    console.log('üì∏ Screenshot √Ænainte de submit salvat');
    
    // Pasul 9: Trimite formularul
    await addButton.click();
    console.log('‚úÖ Formular trimis');
    
    // A»ôteaptƒÉ procesarea
    await page.waitForTimeout(2000);
    
    // VerificƒÉ mesajul de succes (dacƒÉ existƒÉ)
    const successMessage = page.getByTestId(selectors.successMessage);
    const successExists = await successMessage.isVisible().catch(() => false);
    
    if (successExists) {
      console.log('‚úÖ Mesaj de succes afi»ôat');
    } else {
      console.log('‚ÑπÔ∏è Mesaj de succes nu e vizibil (poate fi normal)');
    }
    
    // VerificƒÉ dacƒÉ existƒÉ erori
    const errorMessage = page.getByTestId(selectors.errorMessage);
    const errorExists = await errorMessage.isVisible().catch(() => false);
    
    if (errorExists) {
      const errorText = await errorMessage.textContent();
      console.log(`‚ö†Ô∏è Eroare detectatƒÉ: ${errorText}`);
    } else {
      console.log('‚úÖ Nicio eroare detectatƒÉ');
    }
    
    // FƒÉ un screenshot dupƒÉ submit
    await page.screenshot({ 
      path: 'test-results/transaction-form-after-submit.png', 
      fullPage: true 
    });
    console.log('üì∏ Screenshot dupƒÉ submit salvat');
    
    // VerificƒÉ cƒÉ formularul s-a resetat (dacƒÉ e cazul)
    const resetAmountValue = await page.getByTestId(selectors.amountInput).inputValue();
    console.log(`‚ÑπÔ∏è Valoare sumƒÉ dupƒÉ submit: "${resetAmountValue}"`);
  });

  test('testeazƒÉ adƒÉugare tranzac»õie recurentƒÉ', async ({ page }) => {
    console.log('üîÑ Test specific pentru tranzac»õie recurentƒÉ');
    
    // GenereazƒÉ date care sunt garantat recurente
    const formData = TransactionFormDataGenerator.getRecurringFormData();
    const selectors = TransactionFormDataGenerator.getFormSelectors();
    
    console.log('üé≤ Date recurente generate:', TransactionFormDataGenerator.getFormLabels(formData));
    
    // Login
    await authPage.loginWithPrimaryAccount();
    
    // Workflow complet similar, dar cu focus pe recursivitate
    await page.waitForLoadState('networkidle');
    
    const transactionForm = page.getByTestId(selectors.form);
    await expect(transactionForm).toBeVisible();
    
    // CompleteazƒÉ rapid p√¢nƒÉ la partea de recursivitate
    await page.getByTestId(selectors.typeSelect).selectOption(formData.type);
    await page.waitForTimeout(500);
    
    await page.getByTestId(selectors.amountInput).fill(formData.amount);
    await page.getByTestId(selectors.categorySelect).selectOption(formData.category);
    await page.waitForTimeout(500);
    
    await page.getByTestId(selectors.subcategorySelect).selectOption(formData.subcategory);
    await page.getByTestId(selectors.dateInput).fill(formData.date);
    
    // Focus pe partea de recursivitate
    const recurringCheckbox = page.getByTestId(selectors.recurringCheckbox);
    await recurringCheckbox.check();
    await page.waitForTimeout(500);
    
    const frequencySelect = page.getByTestId(selectors.frequencySelect);
    await expect(frequencySelect).toBeEnabled();
    await frequencySelect.selectOption(formData.frequency);
    console.log(`‚úÖ Configurare recurentƒÉ completƒÉ: ${formData.frequency}`);
    
    // VerificƒÉ cƒÉ frecven»õa e selectatƒÉ corect
    const selectedFrequency = await frequencySelect.inputValue();
    expect(selectedFrequency).toBe(formData.frequency);
    
    if (formData.description) {
      await page.getByTestId(selectors.descriptionInput).fill(formData.description);
    }
    
    // Screenshot »ôi submit
    await page.screenshot({ path: 'test-results/recurring-transaction-form.png' });
    
    const addButton = page.getByTestId(selectors.addButton);
    await expect(addButton).toBeEnabled();
    await addButton.click();
    
    await page.waitForTimeout(2000);
    console.log('‚úÖ Tranzac»õie recurentƒÉ adƒÉugatƒÉ');
  });

  test('testeazƒÉ adƒÉugare tranzac»õie simplƒÉ (non-recurentƒÉ)', async ({ page }) => {
    console.log('üìù Test specific pentru tranzac»õie simplƒÉ');
    
    // GenereazƒÉ date garantat non-recurente
    const formData = TransactionFormDataGenerator.getNonRecurringFormData();
    const selectors = TransactionFormDataGenerator.getFormSelectors();
    
    console.log('üé≤ Date simple generate:', TransactionFormDataGenerator.getFormLabels(formData));
    
    await authPage.loginWithPrimaryAccount();
    await page.waitForLoadState('networkidle');
    
    const transactionForm = page.getByTestId(selectors.form);
    await expect(transactionForm).toBeVisible();
    
    // Workflow complet pentru tranzac»õie simplƒÉ
    await page.getByTestId(selectors.typeSelect).selectOption(formData.type);
    await page.waitForTimeout(500);
    
    await page.getByTestId(selectors.amountInput).fill(formData.amount);
    await page.getByTestId(selectors.categorySelect).selectOption(formData.category);
    await page.waitForTimeout(500);
    
    await page.getByTestId(selectors.subcategorySelect).selectOption(formData.subcategory);
    await page.getByTestId(selectors.dateInput).fill(formData.date);
    
    // VerificƒÉ cƒÉ recursivitatea e dezactivatƒÉ
    const recurringCheckbox = page.getByTestId(selectors.recurringCheckbox);
    await expect(recurringCheckbox).not.toBeChecked();
    
    const frequencySelect = page.getByTestId(selectors.frequencySelect);
    await expect(frequencySelect).toBeDisabled();
    console.log('‚úÖ Configurare simplƒÉ confirmatƒÉ: non-recurentƒÉ');
    
    if (formData.description) {
      await page.getByTestId(selectors.descriptionInput).fill(formData.description);
    }
    
    await page.screenshot({ path: 'test-results/simple-transaction-form.png' });
    
    const addButton = page.getByTestId(selectors.addButton);
    await expect(addButton).toBeEnabled();
    await addButton.click();
    
    await page.waitForTimeout(2000);
    console.log('‚úÖ Tranzac»õie simplƒÉ adƒÉugatƒÉ');
  });
}); 