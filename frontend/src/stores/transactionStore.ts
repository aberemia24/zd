// [2025-04] Store migrat pentru a folosi supabaseService (nu mai folose탳te TransactionService)
import { create } from 'zustand';
import type { StateCreator } from 'zustand';
import { supabaseService } from '../services/supabaseService';
import type { TransactionValidated, CreateTransaction } from '@shared-constants/transaction.schema';
import { TransactionType } from '@shared-constants/enums';
import type { TransactionQueryParams, TransactionFormWithNumberAmount } from '../types/transaction';
import { PAGINATION, MESAJE } from '@shared-constants';
import { useAuthStore } from './authStore';

// Timp pentru time-to-live al cache-ului (15 minute)
const CACHE_TTL = 15 * 60 * 1000; // 15 minute 칥n milisecunde

// Extindere parametri query pentru a include filtrare dup캒 lun캒 탳i an
export interface TransactionQueryParamsWithRecurring extends TransactionQueryParams {
  recurring?: boolean;
  // Parametri noi pentru filtrare dup캒 lun캒/an
  month?: number;
  year?: number;
  includeAdjacentDays?: boolean; // Pentru a include zilele din lunile adiacente
}

/**
 * Interfa탵a pentru starea store-ului de tranzac탵ii
 */
export interface TransactionState {
  // Date
  transactions: TransactionValidated[];
  total: number;
  currentQueryParams: TransactionQueryParamsWithRecurring;
  // Intern: pentru caching parametri fetch
  _lastQueryParams?: TransactionQueryParams;
  // Cache pentru tranzac탵ii pe luni
  monthlyCache: Record<string, {
    transactions: TransactionValidated[];
    lastFetched: number;
  }>;
  
  // Helper methods pentru cache 탳i interval de date
  _getCacheKey: (year: number, month: number) => string;
  _getDateInterval: (year: number, month: number, includeAdjacent?: boolean) => {
    dateFrom: string;
    dateTo: string;
  };
  _invalidateMonthCache: (year: number, month: number) => void;
  
  // Stare UI
  loading: boolean;
  error: string | null;
  
  // Servicii 탳i dependen탵e
  // Eliminat transactionService: TransactionService;

  
  // Ac탵iuni - setters
  setTransactions: (transactions: TransactionValidated[]) => void;
  setTotal: (total: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  setQueryParams: (params: TransactionQueryParamsWithRecurring) => void;
  // Eliminat setTransactionService

  
  // Ac탵iuni - opera탵iuni asincrone
  fetchTransactions: (forceRefresh?: boolean) => Promise<void>;
  refresh: () => Promise<void>;
  saveTransaction: (data: TransactionFormWithNumberAmount, id?: string) => Promise<TransactionValidated>;
  removeTransaction: (id: string) => Promise<void>;
  
  // Ac탵iuni - utilit캒탵i
  reset: () => void;
}

/**
 * Store Zustand pentru gestionarea st캒rii tranzac탵iilor
 * 
 * Responsabilit캒탵i:
 * - Stocarea tranzac탵iilor 탳i metadatelor (total, paginare)
 * - Starea UI (loading, erori)
 * - Comunicarea cu serviciile pentru opera탵iuni CRUD
 * - Actualizarea automat캒 a datelor c칙nd se schimb캒 condi탵iile
 * - Persisten탵a local캒 a st캒rii 칥ntre sesiuni
 */

/**
 * Cre캒m store-ul f캒r캒 middleware-uri pentru a putea fi testat u탳or
 * Aceasta ajut캒 탳i la tipare mai precise 칥n teste
 */
const createTransactionStore: StateCreator<TransactionState> = (set, get) => ({
  // Stare ini탵ial캒
  transactions: [],
  total: 0,
  currentQueryParams: {
    limit: PAGINATION.DEFAULT_LIMIT,
    offset: PAGINATION.DEFAULT_OFFSET,
    sort: PAGINATION.DEFAULT_SORT
  },
  loading: false,
  error: null,
  monthlyCache: {},   // Cache gol ini탵ial
  // Eliminat transactionService

  
  // Setters
  setTransactions: (transactions: TransactionValidated[]) => set({ transactions }),
  setTotal: (total: number) => set({ total }),
  setLoading: (loading: boolean) => set({ loading }),
  setError: (error: string | null) => set({ error }),
  // Setter pentru parametri query - aten탵ie: NU face fetch automat
  // Acest pattern respect캒 regula critic캒 din memorie (anti-pattern useEffect + fetchTransactions)
  setQueryParams: (params: TransactionQueryParamsWithRecurring) => {
    // IMPORTANT: Doar set캒m parametrii, NU declan탳캒m fetch automat!
    // Acest lucru previne bucle infinite (vezi memorie d7b6eb4b-0702-4b0a-b074-3915547a2544)
    set({ currentQueryParams: params });
    // Cel care apeleaz캒 setQueryParams trebuie s캒 apeleze explicit fetchTransactions dac캒 dore탳te fetch
  },
  // Eliminat setTransactionService

  
  // Opera탵iuni asincrone
  // Referin탵캒 intern캒 pentru caching parametri
  _lastQueryParams: undefined as TransactionQueryParams | undefined,

  // Helper pentru a genera cheia de cache pentru luna/anul specific
  _getCacheKey: (year: number, month: number) => {
    return `${year}-${month.toString().padStart(2, '0')}`;
  },
  
  // Helper pentru invalidarea subtil캒 a cache-ului pentru o anumit캒 lun캒/an (f캒r캒 loading UI)
  _invalidateMonthCache: (year: number, month: number) => {
    const cacheKey = get()._getCacheKey(year, month);
    // Actualiz캒m lastFetched = 0 pentru a for탵a re-fetch f캒r캒 a 탳terge datele existente
    // Acest lucru men탵ine UI-ul stabil 탳i previne "flickers" sau loading states bruste
    const currentCache = { ...get().monthlyCache };
    if (currentCache[cacheKey]) {
      set({
        monthlyCache: {
          ...currentCache,
          [cacheKey]: {
            ...currentCache[cacheKey],
            lastFetched: 0 // For탵eaz캒 refresh la urm캒torul fetch, dar p캒streaz캒 datele vechi p칙n캒 atunci
          }
        }
      });
      console.log(`游댃 Cache invalidated for ${cacheKey}, will refresh on next access`);
    }
  },
  
  // Helper pentru a genera intervalul de date pentru luna specific캒 (inclusiv zile adiacente)
  _getDateInterval: (year: number, month: number, includeAdjacent = false) => {
    // Primul 탳i ultimul zi al lunii curente
    const firstDay = new Date(year, month - 1, 1);
    const lastDay = new Date(year, month, 0);
    
    // Ad캒ug캒m zile din luna anterioar캒 탳i urm캒toare dac캒 se cere
    if (includeAdjacent) {
      // 6 zile 칥nainte de 칥nceputul lunii
      const fromDate = new Date(firstDay);
      fromDate.setDate(fromDate.getDate() - 6);
      
      // 6 zile dup캒 sf칙r탳itul lunii
      const toDate = new Date(lastDay);
      toDate.setDate(toDate.getDate() + 6);
      
      return {
        dateFrom: fromDate.toISOString().split('T')[0],  // Format YYYY-MM-DD
        dateTo: toDate.toISOString().split('T')[0]
      };
    } else {
      // Doar luna curent캒
      return {
        dateFrom: firstDay.toISOString().split('T')[0],
        dateTo: lastDay.toISOString().split('T')[0]
      };
    }
  },
  
  fetchTransactions: async (forceRefresh = false) => {
    const { currentQueryParams, _lastQueryParams, setError, monthlyCache, _getCacheKey, _getDateInterval } = get();
    
    // Verific캒m mai 칥nt칙i cache-ul pentru luna/anul specific (dac캒 sunt specificate)
    if (!forceRefresh && currentQueryParams.year && currentQueryParams.month) {
      const cacheKey = _getCacheKey(currentQueryParams.year, currentQueryParams.month);
      const cacheEntry = monthlyCache[cacheKey];
      const now = Date.now();
      
      // Dac캒 avem date 칥n cache 탳i nu sunt expirate, le folosim
      if (cacheEntry && (now - cacheEntry.lastFetched < CACHE_TTL)) {
        console.log(`游댃 Using cached data for ${cacheKey}`);
        set({ 
          transactions: cacheEntry.transactions, 
          loading: false,
          total: cacheEntry.transactions.length 
        });
        return;
      }
    }
    
    // Cache miss sau forceRefresh - facem fetch nou
    // Caching: nu refetch dac캒 parametrii identici 탳i f캒r캒 forceRefresh
    if (!forceRefresh && _lastQueryParams && JSON.stringify(_lastQueryParams) === JSON.stringify(currentQueryParams)) {
      set({ loading: false });
      return;
    }
    
    set({ loading: true, error: null });
    try {
      set({ _lastQueryParams: { ...currentQueryParams } });
      
      // Preg캒tim parametrii pentru filtrare
      const filters: any = {
        type: currentQueryParams.type as TransactionType,
        category: currentQueryParams.category,
        recurring: currentQueryParams.recurring,
      };
      
      // Ad캒ug캒m filtrare pe dat캒 dac캒 avem luna 탳i anul specificate
      if (currentQueryParams.year && currentQueryParams.month) {
        const dateInterval = _getDateInterval(
          currentQueryParams.year, 
          currentQueryParams.month, 
          currentQueryParams.includeAdjacentDays
        );
        filters.dateFrom = dateInterval.dateFrom;
        filters.dateTo = dateInterval.dateTo;
      }
      
      // Ob탵inem user_id din authStore pentru a respecta RLS Supabase
      const user = useAuthStore.getState().user;
      const userId = user?.id || '';
      
      // Fetch cu filtrele actualizate
      const { data, count } = await supabaseService.fetchTransactions(userId, {
        limit: currentQueryParams.limit,
        offset: currentQueryParams.offset,
        sort: currentQueryParams.sort as any,
        order: 'desc',
      }, filters);
      
      // Actualiz캒m cache-ul dac캒 este specificat캒 luna/anul
      if (currentQueryParams.year && currentQueryParams.month) {
        const cacheKey = _getCacheKey(currentQueryParams.year, currentQueryParams.month);
        set({
          transactions: data,
          total: count,
          loading: false,
          monthlyCache: {
            ...get().monthlyCache,
            [cacheKey]: {
              transactions: data,
              lastFetched: Date.now()
            }
          }
        });
      } else {
        // Set캒m doar datele f캒r캒 a actualiza cache-ul
        set({
          transactions: data,
          total: count,
          loading: false
        });
      }
    } catch (err) {
      console.error('Error fetching transactions:', err);
      set({
        transactions: [],
        total: 0,
        loading: false,
        error: MESAJE.EROARE_INCARCARE_TRANZACTII
      });
    }
  },
  
  refresh: async () => {
    // Previne apeluri multiple care pot declan탳a bucl캒 infinit캒
    if (get().loading) return;
    console.log('游댃 transactionStore.refresh called');
    set({ loading: true });
    try {
      await get().fetchTransactions(true);
    } finally {
      set({ loading: false });
    }
  },
  
  saveTransaction: async (data: TransactionFormWithNumberAmount, id?: string) => {
    try {
      let result: TransactionValidated;
      if (id) {
        result = await supabaseService.updateTransaction(id, data as any);
      } else {
        result = await supabaseService.createTransaction(data as any);
      }
      
      // Invalid캒m cache-ul explicit pentru luna 탳i anul curent dac캒 sunt disponibile
      const { year, month } = get().currentQueryParams;
      if (year && month) {
        console.log(`游댃 Invalidating cache after transaction save for ${year}-${month}`);
        get()._invalidateMonthCache(year, month);
      }
      
      // Reset캒m parametrii de fetch pentru a for탵a un reload complet
      set({ _lastQueryParams: undefined });
      
      // Folosim setTimeout pentru a preveni actualiz캒rile 칥n cascad캒 conform cu best practice
      // din memoria e0d0698c-ac6d-444f-8811-b1a3936df71b
      setTimeout(() => {
        // Folosim explicit forceRefresh=true pentru a ignora cache-ul
        get().fetchTransactions(true);
      }, 100);
      
      return result;
    } catch (err) {
      set({ error: MESAJE.EROARE_SALVARE_TRANZACTIE });
      throw err;
    }
  },
  
  removeTransaction: async (id: string) => {
    try {
      await supabaseService.deleteTransaction(id);
      set({ _lastQueryParams: undefined });
      await get().fetchTransactions();
    } catch (err) {
      set({ error: MESAJE.EROARE_STERGERE_TRANZACTIE });
      throw err;
    }
  },
  
  // Utilit캒탵i
  reset: () => set({
    transactions: [],
    total: 0,
    currentQueryParams: {
      limit: PAGINATION.DEFAULT_LIMIT,
      offset: PAGINATION.DEFAULT_OFFSET,
      sort: PAGINATION.DEFAULT_SORT
    },
    loading: false,
    error: null,
    _lastQueryParams: undefined,
    monthlyCache: {}, // Reset캒m 탳i cache-ul lunar
    // Nu reset캒m transactionService pentru a p캒stra dependency injection
  }),
});

// Folosim doar store-ul simplu f캒r캒 middleware-uri pentru a testa
export const useTransactionStore = create<TransactionState>(createTransactionStore);
