import { renderHook, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { setupServer } from 'msw/node';
import { http, HttpResponse } from 'msw';
import React from 'react';
import { useTransactions, useTransaction, useInfiniteTransactions } from '../../services/hooks/useTransactionQueries';
import { TransactionType, TransactionStatus } from '@shared-constants';

// Mock pentru authStore cu user valid
jest.mock('../../stores/authStore', () => ({
  useAuthStore: () => ({
    user: { id: 'test-user-123', email: 'test@example.com' },
    isAuthenticated: true,
    isLoading: false,
    error: null
  })
}));

const API_BASE_URL = 'https://mock-project.supabase.co/rest/v1';

const mockTransactionData = {
  id: '1',
  userId: 'test-user-123',
  type: TransactionType.INCOME,
  amount: 1000,
  date: '2024-01-15',
  category: 'Venituri',
  subcategory: 'Salariu',
  description: 'Test transaction',
  status: TransactionStatus.COMPLETED,
  recurring: false
};

// MSW server setup pentru v2
const server = setupServer(
  // GET transactions - success
  http.get(`${API_BASE_URL}/transactions`, ({ request }) => {
    const url = new URL(request.url);
    const type = url.searchParams.get('type');
    const eq = url.searchParams.get('eq');
    
    // Simulate different responses based on query params
    if (type === 'INVALID_TYPE') {
      return HttpResponse.json({ error: 'Invalid transaction type' }, { status: 400 });
    }
    
    if (eq === 'empty') {
      return HttpResponse.json([]);
    }
    
    return HttpResponse.json([mockTransactionData]);
  }),

  // GET single transaction
  http.get(`${API_BASE_URL}/transactions`, ({ request }) => {
    const url = new URL(request.url);
    const id = url.searchParams.get('id');
    
    if (id === 'invalid-id') {
      return HttpResponse.json({ error: 'Transaction not found' }, { status: 404 });
    }
    
    if (id === 'timeout') {
      // Simulate timeout cu delay
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(HttpResponse.json([mockTransactionData]));
        }, 10000);
      });
    }
    
    return HttpResponse.json([mockTransactionData]);
  }),

  // Network error simulation
  http.get(`${API_BASE_URL}/transactions-network-error`, () => {
    return HttpResponse.error();
  }),

  // Rate limiting simulation
  http.get(`${API_BASE_URL}/transactions-rate-limit`, () => {
    return HttpResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
  })
);

beforeAll(() => {
  server.listen({ onUnhandledRequest: 'error' });
  jest.useFakeTimers();
});

afterEach(() => {
  server.resetHandlers();
  jest.clearAllTimers();
});

afterAll(() => {
  server.close();
  jest.useRealTimers();
});

// Helper pentru crearea wrapper-ului React Query
const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        cacheTime: 0,
      },
    },
  });

  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );

  return Wrapper;
};

describe.skip('useTransactionQueries Integration Tests', () => {
  describe('useTransactions Hook', () => {
    test('should fetch transactions successfully', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions({ type: TransactionType.INCOME }),
        { wrapper }
      );

      expect(result.current.isLoading).toBe(true);

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.data).toEqual([mockTransactionData]);
      expect(result.current.error).toBeNull();
    });

    test('should handle empty results', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions({ category: 'empty' }),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.data).toEqual([]);
      expect(result.current.error).toBeNull();
    });

    test('should handle API validation errors', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions({ type: 'INVALID_TYPE' as TransactionType }),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.data).toBeUndefined();
      expect(result.current.isError).toBe(true);
      expect(result.current.error).toBeTruthy();
    });
  });

  describe('useTransaction Hook', () => {
    test('should fetch single transaction successfully', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransaction('1'),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.data).toEqual(mockTransactionData);
      expect(result.current.error).toBeNull();
    });

    test('should handle transaction not found', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransaction('invalid-id'),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.data).toBeUndefined();
      expect(result.current.isError).toBe(true);
    });

    test('should handle timeout scenarios', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransaction('timeout'),
        { wrapper }
      );

      expect(result.current.isLoading).toBe(true);

      // Fast-forward past timeout
      jest.advanceTimersByTime(11000);

      await waitFor(
        () => {
          expect(result.current.isLoading).toBe(false);
        },
        { timeout: 15000 }
      );

      expect(result.current.isError).toBe(true);
    });
  });

  describe('Network Edge Cases', () => {
    test('should handle network failures gracefully', async () => {
      // Override the default handler for this test
      server.use(
        http.get(`${API_BASE_URL}/transactions`, () => {
          return HttpResponse.error();
        })
      );

      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions(),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.isError).toBe(true);
      expect(result.current.data).toBeUndefined();
    });

    test('should handle rate limiting', async () => {
      server.use(
        http.get(`${API_BASE_URL}/transactions`, () => {
          return HttpResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
        })
      );

      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions(),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      expect(result.current.isError).toBe(true);
      expect(result.current.error?.message).toContain('429');
    });
  });

  describe('Query Key Management', () => {
    test('should generate consistent query keys for similar parameters', async () => {
      const wrapper = createWrapper();
      
      const { result: result1 } = renderHook(
        () => useTransactions({ type: TransactionType.INCOME, category: 'Test' }),
        { wrapper }
      );

      const { result: result2 } = renderHook(
        () => useTransactions({ category: 'Test', type: TransactionType.INCOME }),
        { wrapper }
      );

      // Both hooks should use the same query key and share cache
      await waitFor(() => {
        expect(result1.current.isLoading).toBe(false);
        expect(result2.current.isLoading).toBe(false);
      });

      expect(result1.current.data).toEqual(result2.current.data);
    });

    test('should handle complex filter combinations', async () => {
      const wrapper = createWrapper();
      
      const complexFilters = {
        type: TransactionType.EXPENSE,
        category: 'Food',
        subcategory: 'Restaurants',
        dateFrom: '2024-01-01',
        dateTo: '2024-12-31',
        minAmount: 10,
        maxAmount: 1000,
        search: 'pizza'
      };

      const { result } = renderHook(
        () => useTransactions(complexFilters),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      // Should handle complex filters without errors
      expect(result.current.isError).toBe(false);
    });
  });

  describe('Memory and Performance', () => {
    test('should handle rapid filter changes without memory leaks', async () => {
      const wrapper = createWrapper();
      
      const filters = [
        { type: TransactionType.INCOME },
        { category: 'Food' },
        { amount: { min: 100, max: 500 } },
        { date: { from: '2024-01-01', to: '2024-01-31' } },
        {}
      ];

      for (const filter of filters) {
        const { result, unmount } = renderHook(
          () => useTransactions(filter as any),
          { wrapper }
        );

        await waitFor(() => {
          expect(result.current.isLoading).toBe(false);
        });

        expect(result.current.isError).toBe(false);
        
        // Cleanup to prevent memory leaks
        unmount();
      }
    });

    test('should handle large datasets efficiently', async () => {
      const largeDataset = Array.from({ length: 1000 }, (_, i) => ({
        ...mockTransactionData,
        id: `transaction-${i}`,
        amount: Math.random() * 1000
      }));

      server.use(
        http.get(`${API_BASE_URL}/transactions`, () => {
          return HttpResponse.json(largeDataset);
        })
      );

      const wrapper = createWrapper();
      
      const startTime = Date.now();
      const { result } = renderHook(
        () => useTransactions(),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });
      
      const endTime = Date.now();
      const duration = endTime - startTime;

      expect(result.current.data).toHaveLength(1000);
      expect(duration).toBeLessThan(5000); // Should process quickly
    });
  });

  describe('Cache Behavior', () => {
    test('should handle stale data scenarios', async () => {
      const wrapper = createWrapper();
      
      const { result } = renderHook(
        () => useTransactions(),
        { wrapper }
      );

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false);
      });

      const initialData = result.current.data;

      // Update server response
      server.use(
        http.get(`${API_BASE_URL}/transactions`, () => {
          return HttpResponse.json([{ ...mockTransactionData, amount: 2000 }]);
        })
      );

      // Refetch should get new data
      await result.current.refetch();

      expect(result.current.data).not.toEqual(initialData);
      expect(result.current.data?.[0]?.amount).toBe(2000);
    });
  });

  test('placeholder', () => {
    expect(true).toBe(true);
  });
}); 