name: Nightly Regression Tests

on:
  schedule:
    # Daily at 3:00 UTC (5:00 RO time)
    - cron: '0 3 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      browser:
        description: 'Browser to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all

env:
  NODE_VERSION: '20'

jobs:
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: ${{ github.event.inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON(format('["{0}"]', github.event.inputs.browser || 'chromium')) }}
      fail-fast: false # Continue other browsers even if one fails
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: Run regression tests
        run: npm run test:e2e:regression --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          
      - name: Upload trace files on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-${{ matrix.browser }}
          path: |
            frontend/test-results/**/trace.zip
            frontend/test-results/**/video.webm
            frontend/test-results/**/screenshots/*.png
          retention-days: 7
          
      - name: Upload HTML report on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: frontend/playwright-report/
          retention-days: 7

  validation-suite:
    name: Full Validation Suite
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run complete validation suite
        run: npm run validate:all
        
      - name: Generate validation report
        if: always()
        run: |
          echo "## 🔍 Nightly Validation Report" > validation-report.md
          echo "**Date**: $(date)" >> validation-report.md
          echo "**Branch**: ${{ github.ref_name }}" >> validation-report.md
          echo "**Commit**: ${{ github.sha }}" >> validation-report.md
          echo "" >> validation-report.md
          
          if [ $? -eq 0 ]; then
            echo "✅ **Status**: ALL VALIDATIONS PASSED" >> validation-report.md
          else
            echo "❌ **Status**: VALIDATION FAILURES DETECTED" >> validation-report.md
          fi
          
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report
          path: validation-report.md
          retention-days: 7

  notification:
    name: Send Notifications
    needs: [regression-tests, validation-suite]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Prepare notification summary
        id: summary
        run: |
          echo "## 🌙 Nightly Testing Summary" > summary.md
          echo "**Date**: $(date)" >> summary.md
          echo "**Repository**: ${{ github.repository }}" >> summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> summary.md
          echo "" >> summary.md
          
          # Regression tests results
          if [[ "${{ needs.regression-tests.result }}" == "success" ]]; then
            echo "✅ **Regression Tests**: PASSED" >> summary.md
          else
            echo "❌ **Regression Tests**: FAILED" >> summary.md
            echo "   - Check artifacts for traces and videos" >> summary.md
          fi
          
          # Validation suite results
          if [[ "${{ needs.validation-suite.result }}" == "success" ]]; then
            echo "✅ **Validation Suite**: PASSED" >> summary.md
          else
            echo "❌ **Validation Suite**: FAILED" >> summary.md
            echo "   - Check validation report for details" >> summary.md
          fi
          
          echo "" >> summary.md
          echo "🔗 **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> summary.md
          
          # Set outputs for conditional notifications
          if [[ "${{ needs.regression-tests.result }}" == "success" && "${{ needs.validation-suite.result }}" == "success" ]]; then
            echo "all_passed=true" >> $GITHUB_OUTPUT
          else
            echo "all_passed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create issue on failure
        if: steps.summary.outputs.all_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: summary,
              labels: ['bug', 'nightly-failure', 'priority-high']
            });

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < oneWeekAgo && artifact.name.includes('playwright')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted old artifact: ${artifact.name}`);
              }
            } 